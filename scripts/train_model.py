# -*- coding: utf-8 -*-
"""train_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13h2DeK1Ji92ZxeML4ezuSv4oZRf3uXSb
"""

from datasets import load_dataset, Dataset
from transformers import AutoTokenizer, AutoModelForCausalLM, DataCollatorForLanguageModeling, TrainingArguments, Trainer
import torch
import os
import math

def tokenize_function(examples):
    return tokenizer(examples['text'], truncation=True, max_length=1024)

if __name__ == '__main__':
    # Load preprocessed dialogues
    with open('data/dialogue_texts.txt', 'r', encoding='utf-8') as f:
        dialogue_texts = f.read().splitlines()

    # Create dataset
    dataset = Dataset.from_dict({'text': dialogue_texts})

    # Shuffle and split the dataset
    dataset = dataset.shuffle(seed=42)
    dataset = dataset.train_test_split(test_size=0.1)
    train_dataset = dataset['train']
    val_dataset = dataset['test']

    # Load the tokenizer
    tokenizer = AutoTokenizer.from_pretrained('microsoft/DialoGPT-small')
    special_tokens = {'additional_special_tokens': ['<|user|>', '<|assistant|>', '<|endofturn|>']}
    tokenizer.add_special_tokens(special_tokens)
    tokenizer.pad_token = tokenizer.eos_token

    # Tokenize datasets
    tokenized_train = train_dataset.map(tokenize_function, batched=True, remove_columns=['text'])
    tokenized_val = val_dataset.map(tokenize_function, batched=True, remove_columns=['text'])

    # Load the model
    model = AutoModelForCausalLM.from_pretrained('microsoft/DialoGPT-small')
    model.resize_token_embeddings(len(tokenizer))

    # Define data collator
    data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)

    # Set up training arguments
    training_args = TrainingArguments(
        output_dir='results',
        num_train_epochs=3,
        per_device_train_batch_size=2,
        per_device_eval_batch_size=2,
        evaluation_strategy='steps',
        eval_steps=500,
        logging_steps=500,
        save_steps=500,
        warmup_steps=200,
        weight_decay=0.01,
        logging_dir='logs',
        save_total_limit=2,
        fp16=torch.cuda.is_available(),
    )

    # Initialize the Trainer
    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=tokenized_train,
        eval_dataset=tokenized_val,
        data_collator=data_collator,
    )

    # Start training
    trainer.train()

    # Evaluate the model
    eval_results = trainer.evaluate()
    print(f"Perplexity: {math.exp(eval_results['eval_loss']):.2f}")

    # Save the model
    model.save_pretrained('models/chatbot_model')
    tokenizer.save_pretrained('models/chatbot_model')